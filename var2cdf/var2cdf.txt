var2cdf - developing the ability to share structured variables between
Matlab and IDL via CDF.

Paul O'Brien, Tim Guild, Edith Mazur

Matlab and IDL, being high-level languages, support structured and
multidimensional variables. A single CDF file can store multiple
variables, each of which can be a multi-dimensional array. It should
be possible to create a set of conventions such that a Matlab or IDL
variable can be saved to a CDF file and then reloaded in the other
language with minimal or no loss of structure.

(1) Scalar variable types

We want to support scalars of type float64, float32, float16, int32,
int16, char. We might eventually think about complex numbers.

CDFs support the following data types (not here the finaly # indicates
# of bytes, like fortran, not # of bits, like C)

CDF_BYTE - 1-byte, signed integer 
CDF_CHAR - 1-byte, signed character 
CDF_INT1 - 1-byte, signed integer 
CDF_UCHAR - 1-byte, unsigned character 
CDF_UINT1 - 1-byte, unsigned integer 
CDF_INT2 - 2-byte, signed integer 
CDF_UNIT2 - 2-byte, unsigned integer 
CDF_INT4 - 4-byte, signed integer 
CDF_UINT4 - 4-byte, unsigned integer 
CDF_REAL4 - 4-byte, floating point 
CDF_FLOAT - 4-byte, floating point 
CDF_REAL8 - 8-byte, floating point 
CDF_DOUBLE - 8-byte, floating point 
CDF_EPOCH - 8-byte, floating point 
CDF_EPOCH16 - 2*8-byte, floating point 

(2) Arrays, Matrices, and Multi-Dimensional variables

We should be able to store arrays, matrices, and multi-dimensional
variables using the CDF's own multidimensional variable handling. We
will have to use some care in retaining the row or column shape of
vectors. For example, the Matlab CDF routines appear to convert row
vectors to column vectors. Also, Matlab's cdfwrite strips off trailing
singleton dimensions.

(3) Nested Variables

CDF does not appear to support structured or nested variables. That
is, a CDF is a collection of global variables, which may have extra
metadata stored in an attributes table. Therefore, to convert between
Matlab and IDL structured variables and CDFs, we will create
pseudonyms for structured variables. Fortunately, both IDL and Matlab
use the '.' character to access nested variables. For example, "var.x"
would access the field "x" from variable "var". In a CDF the string
"var.x" is a legal variable name. Thus, it seems that the obvious
solution to the nesting problem is to treat "var.x" as the variable
name (pseudonym) in the CDF and to have the IDL/Matlab read/write
routines handle assembling and parsing these pseudonyms. This system
should work for arbitrary depth of nesting, up to some limit for very
long variable names in CDF. Some convention may be necessary to determine
whether a structure variable is to be treated as an array of structures
or a structure of arrays.


(4) Heterogeneous arrays

Matlab's cell arrays and IDL's collection data type are arrays of
heterogeneous data. CDFs have no direct analogue. We will probably
have to use a kludge, like storing each element with a different name
in the CDF. For example in Matlab a cell array element is accessed
"var{1,2}" or, if the element is a structure with array elements, then
it's something like "var{1,2}.x(5)". These are valid names in a CDF,
so maybe we can just do as we did for nested variables and use a
pseudonym, while having the Matlab/IDL read/write routines assemble
and parse the pseudonyms.

(5) Compression

Eventually we may want to enable compression of the CDFs. For now at
least the Matlab CDF writer does not allow compression.
