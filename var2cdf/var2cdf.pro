;************************************************************************************************;* PROGRAM CDF2VAR;*;* Written by	Edith L. Mazur;*		Space Instrumentation Department;*		April 12, 2008;*;* This program takes a CDF that was created by Matlab and loads it into IDL.  The idea is that;* both IDL and MATLAB use structure formatted data but an indendent platform is needed to ;* read structures that were created in IDL and are now needed in Matlab and vice versa.  CDF is;* used for the independent platform but it is necessary to recreate the structures that were used;* in either IDL or Matlab.  Since CDF does not handle structures, a variable naming structure is;* used to give clues to the original structure format.;*;* This program loads in a CDF that was created in Matlab, but I suppose it should work just as;* well for a CDF originally created in IDL as well. It then recreates the data structure based ;* upon the filenames.  ;*;**************************************************************************************************filename = ' 'READ, 'Enter filename (including path): ', filenamePRINT, ' ';*;* Open the CDF and retrieve global information about the file;*id = CDF_OPEN(filename)varinfo = CDF_INQUIRE(id);*;* Retrieve the variable information including the variable names,;* variable types, and the number of elements for each variable.;*numAtts  = varinfo.nattsnumZvars = varinfo.nzvarsattNames = STRARR(3,numAtts)varNames = STRARR(numZvars)varType  = STRARR(numZvars)varElem  = LONARR(numZvars)FOR aa = 0, numAtts - 1 DO BEGIN    CDF_ATTINQ, id, aa, name, scope, maxentry    attNames(0,aa) = name    attNames(1,aa) = scope    attNames(2,aa) = maxentryENDFORFOR zz = 0, numZvars - 1 DO BEGIN    result = CDF_VARINQ(id, zz, /zvariable)    varNames(zz) = result.name    varType(zz)  = result.dataType    varElem(zz)  = result.numElemENDFOR;**;*  Determine the name of the main structure and its substructures.;*nV = N_ELEMENTS(varNames);* Figure out # of structuresCDF_CONTROL, id, attribute = 'strucNames', get_attr_info = ginfonumStrucs = ginfo.numgentries strucNames = STRARR(numStrucs)FOR jj = 0, numStrucs - 1 DO BEGIN    CDF_ATTGET, id, 'strucNames', jj, value, cdf_type = type    strucNames(jj) = valueENDFOR;*;* This portion of the program loads the data and creates the structure at the same;* time.  The "EXECUTE" command is used to recreate exactly the original name of the ;* structure.  ;*FOR kk = 0, numStrucs - 1 DO BEGIN    result     = STRSPLIT(strucNames(kk), '.', COUNT = count, /EXTRACT)    sname      = result(count - 1)    ;*    ;* Determine the variable type for each element of the structure    ;* This is necessary when creating the structure.    wtype      = WHERE(strucNames(kk) EQ varNames)    stype      = varType(wtype)    teststring = '*' + sname + '.*'    test       = STRMATCH(varNames, teststring)    wtest      = WHERE(test eq 1, wcount)     ;*     ;* Here is where the variables included in each structure is determined.    FOR mm = 0, wcount - 1 DO BEGIN        vname    = varNames(wtest(mm))        vtype    = varType(wtest(mm))        vnresult = STRSPLIT(vname, '.', COUNT = vncount)        IF vncount EQ (count + 1) THEN BEGIN           ;*            ;* check to make sure variable is not the name of one of the structures.           wstrucName = WHERE(strucNames EQ vname, scount)           IF scount EQ 0 THEN BEGIN              ;*              ;* Load variable names into an array              sname = [[sname], vname]              stype = [[stype], vtype]           ENDIF        ENDIF    ENDFOR    ;*    ;* This is where we create the structure and load the variables    ;* into it.    numVars      = N_ELEMENTS(sname)    dummy        = strucNames(kk)    result_dummy = STRSPLIT(dummy, '.', COUNT = dcount)    dummy        = sname(0)    IF kk EQ 0 THEN storeStructs = dummy        IF kk GT 0 THEN storeStructs = [[storeStructs], dummy]    FOR nn = 1, numVars - 1 DO BEGIN        name = sname(nn)        type = stype(nn)        ;* convert name to a format that can be used as an element        ;* in the structure        result_element = STRSPLIT(name, '.', /EXTRACT)        element_name   = result_element(dcount)        ;*        ;* Use varget to load in data and create_struct to put        ;* that data into a structure        IF (type EQ 'CDF_UCHAR') or (type EQ 'CDF_CHAR') THEN BEGIN           CDF_VARGET, id, name, var_cdf, /STRING           numElems = N_ELEMENTS(var_cdf)        ENDIF ELSE BEGIN           CDF_VARGET, id, name, var_cdf        ENDELSE        IF nn EQ 1 THEN BEGIN           commandString = dummy + ' = CREATE_STRUCT("' + element_name +     $                           '", var_cdf)'            Eresult       = EXECUTE(commandString)        ENDIF        IF nn GT 1 THEN BEGIN           commandString = dummy + ' = CREATE_STRUCT(' + dummy + ',"' +      $                           element_name + '", var_cdf)'           Eresult       = EXECUTE(commandString)        ENDIF     ENDFORENDFOR;*;* Combine main structure with its substructures.mainName = storestructs(0)FOR ss = 1, N_ELEMENTS(storestructs) -1 DO BEGIN    subname = storestructs(ss)    command_string = mainName + '=CREATE_STRUCT(' + mainName + ',"' + 	$                     storestructs(ss) + '",' + subname + ')'    Eresult        = EXECUTE(command_string)ENDFORPRINT, 'Structure: ', mainName, ' is loaded'PRINT, ' 'CDF_CLOSE, idEND